#!/usr/bin/env python3
"""
    Purpose:
        Run example Requests (Generated by testing through Alexa Developer
        Console) through the lamba function locally

    function call:
        python3 run_example_requests.py {--request}

        example call: python3 run_example_requests.py --request=LaunchRequest
"""

# Python Library Imports
import json
import logging
import os
import sys
from argparse import ArgumentParser

# Local Library Imports
PROJECT_BASE_PATH = f"{os.path.dirname(os.path.realpath(__file__))}/../"
sys.path.insert(0, PROJECT_BASE_PATH)
import lambda_entrypoint
from utils import loggers


###
# Main Functionality
###


def main():
    """
    Purpose:
        Main Execution for Running Example Requests
    Args:
        N/A
    Return:
        N/A
    """

    opts = get_options()

    request = get_example_request_from_file(opts.request_name)

    # request_output = lambda_entrypoint.launch_request_handler(request)

    import pdb; pdb.set_trace()


###
# Get Utterance
###


def get_example_request_from_file(request_name):
    """
    Purpose:
        Get an example request from a file in the example_requests directory
    Args:
        request_type (String): name of the request type to get data from
    Return:
        N/A
    """
    logging.info(f"Loading Request File Into Memory: {request_name}")

    request_file = f"example_requests/{request_name}.json"
    with open(request_file, "r") as request_file_obj:
        return json.load(request_file_obj)

###
# General/Helper Functons
###


def get_options():
    """
    Purpose:
        Parse CLI arguments for Running an Example Request
    Args:
        N/A
    Return:
        N/A
    """

    parser = ArgumentParser(description='Run an Example Request Through Lambda')
    required = parser.add_argument_group('Required Arguments')
    optional = parser.add_argument_group('Optional Arguments')

    # Optional Arguments
    # N/A

    # Required Arguments
    required.add_argument(
        "--request_name",
        help="Which Request to Test",
        dest='request_name',
        required=True,
    )

    return parser.parse_args()


###
# Execute Function
###

if __name__ == "__main__":

    loggers.clear_log_handlers()
    logging = loggers.get_stdout_logging(
        log_level=logging.INFO, log_prefix="[run_example_requests]: "
    )

    try:
        main()
    except Exception as err:
        logging.exception(
            "{0} failed due to error: {1}".format(os.path.basename(__file__), err)
        )
        raise
